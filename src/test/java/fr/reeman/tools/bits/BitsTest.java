package fr.reeman.tools.bits;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Test;

public class BitsTest {
	
	@Test
	public void hex() {
		// array
		assertEquals("null", Bits.hex(null));
		assertEquals("", Bits.hex(new byte[] {}));
		assertEquals("0x00 0x01 0xFF", Bits.hex(new byte[] { 0x00, 0x01, (byte)0xFF }));

		// byte
		assertEquals("0x00", Bits.hex((byte)0x00));
		assertEquals("0x01", Bits.hex((byte)0x01));
		assertEquals("0x10", Bits.hex((byte)0x10));
		assertEquals("0x80", Bits.hex((byte)0x80));
		assertEquals("0xFF", Bits.hex((byte)0xFF));
		
		// short
		assertEquals("0x00 0x00", Bits.hex((short)0x00));
		assertEquals("0x00 0x01", Bits.hex((short)0x01));
		assertEquals("0x00 0x10", Bits.hex((short)0x10));
		assertEquals("0x00 0x80", Bits.hex((short)0x80));
		assertEquals("0x00 0xFF", Bits.hex((short)0xFF));
		assertEquals("0x01 0x2C", Bits.hex((short)300));
		assertEquals("0xFF 0xFF", Bits.hex((short)65535));
		
		// int
		assertEquals("0x00 0x00 0x00 0x00", Bits.hex(0x00));
		assertEquals("0x00 0x00 0x00 0x01", Bits.hex(0x01));
		assertEquals("0x00 0x00 0x00 0x10", Bits.hex(0x10));
		assertEquals("0x00 0x00 0x00 0x80", Bits.hex(0x80));
		assertEquals("0x00 0x00 0x00 0xFF", Bits.hex(0xFF));
		assertEquals("0x00 0x00 0x01 0x2C", Bits.hex(300));
		assertEquals("0x00 0x00 0xFF 0xFF", Bits.hex(65535));
		assertEquals("0x00 0x01 0x00 0x00", Bits.hex(65536));
		assertEquals("0x7F 0xFF 0xFF 0xFF", Bits.hex(Integer.MAX_VALUE));
		
		// long
		assertEquals("0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00", Bits.hex(0x00l));
		assertEquals("0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01", Bits.hex(0x01l));
		assertEquals("0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x10", Bits.hex(0x10l));
		assertEquals("0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80", Bits.hex(0x80l));
		assertEquals("0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xFF", Bits.hex(0xFFl));
		assertEquals("0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x2C", Bits.hex(300l));
		assertEquals("0x00 0x00 0x00 0x00 0x00 0x00 0xFF 0xFF", Bits.hex(65535l));
		assertEquals("0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x00", Bits.hex(65536l));
	}

	
	@Test
	public void shiftLeft() {
		assertTrue(Arrays.equals(new byte[] { 0x00 }, Bits.shiftLeft(new byte[] { 0x00 }, 1)));
		
		assertTrue(Arrays.equals(new byte[] { 0x02 }, Bits.shiftLeft(new byte[] { 0x01 }, 1)));
		assertTrue(Arrays.equals(new byte[] { 0x02 }, Bits.shiftLeft(new byte[] { 0x00, 0x01 }, 1)));
		assertTrue(Arrays.equals(new byte[] { 0x01, 0x00 }, Bits.shiftLeft(new byte[] { 0x01 }, 8)));
		assertTrue(Arrays.equals(new byte[] { 0x01, 0x00 }, Bits.shiftLeft(new byte[] { 0x00, 0x01 }, 8)));

		assertTrue(Arrays.equals(new byte[] { 0x00 }, Bits.shiftLeft(new byte[] { 0x00 }, 16)));
	}
}
